#!/usr/bin/env node

const http = require('http');
const mongoose = require('mongoose')
const app = require('../app');
const mongoLoader = require('../loaders/mongoLoader')

const createHttpServer = (port) => {
  app.set('port', port)
  
  const server = http.createServer(app)
  server.listen(port)
  server.on('error', onError);
  server.on('listening', onListening);
}

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  console.log('Listening on ' + port);
  mongoLoader()
}

process.on('SIGINT', async () => {
  console.log('Stoping server...');
  mongoose.disconnect((err) => {
    if(err) {
        console.log(err)
    }else {
        console.log('Mongo connection closed')
        process.exit(0);
    }
  })
})

const port = normalizePort(process.env.PORT || '3000');
createHttpServer(port)